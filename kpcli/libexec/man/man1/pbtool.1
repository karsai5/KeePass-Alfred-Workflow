.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PBTOOL 1"
.TH PBTOOL 1 "2017-03-23" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pbtool \- Manipulate Mac OS X pasteboards/clipboards.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& $ pbtool
\& pbtool> paste
\& Flags = 0 (kPasteboardFlavorNoFlags)
\& Able was I ere I saw Elba.
\& pbtool> clear
\& pbtool> copy "Madam, I\*(Aqm Adam."
\& pbtool> exit
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fIPbtool\fR takes the following options:
.PP
\&\fB\-binary\fR
.PP
This option specifies that no end-of-line translation is done on output.
Despite its name, it should be fine for text. To turn this off, specify
\&\-nobinary.
.PP
The default is \-binary.
.PP
\&\fB\-echo\fR
.PP
This option specifies that input is echoed to standard error. To turn
this off, specify \-noecho.
.PP
The default is \-noecho.
.PP
\&\fB\-id=n\fR
.PP
This option specifies the pasteboard item \s-1ID\s0 to be used for \fIcopy\fR and
\&\fIpaste\fR, as an unsigned integer. To specify no item id (which in fact
causes \fIcopy\fR to use item \s-1ID 1,\s0 and \fIpaste\fR to use the last item that
contains the desired flavor), specify \-noid.
.PP
The default is \-noid.
.SH "DETAILS"
.IX Header "DETAILS"
\&\fIPbtool\fR is a Perl script that acts as a wrapper for Mac::Pasteboard.
Most functions of the package are available through the script, and it
adds a couple on its own account. The commands in general operate on the
current pasteboard, which initially is the system clipboard. Commands
also exist for changing the script's notion of the current pasteboard.
.PP
Input is from standard in, using Term::ReadLine if that is available and
the input is a terminal.
.PP
Blank input lines and input lines whose first non-blank character is '#'
are ignored. Any lines left are broken into tokens on spaces, though
quoted text is kept together. Text::ParseWords does the heavy lifting
here.
.PP
Some input tokens are interpreted based on their leading characters, as
follows.
.PP
Tokens beginning with '<<'  are taken to specify 'here documents'. The
remainder of the token specifies the string that ends the here document,
which consists of all lines of the input following the 'here document'
specification up to but not including the string that specifies its end.
The 'here document' replaces the token that specifies it. If multiple
here documents are specified on an input line, they are taken out of the
input in left-to-right order.
.PP
Tokens beginning with '<' are taken to specify an input file, whose name
is the rest of the token. The file is read, and its contents replace the
token.
.PP
Tokens beginning with '>' or '>>' are taken to specify an output file,
whose name is the rest of the token. Output of the command goes to that
file, which is opened for appending if the token begins with '>>', or
for output if it begins with '>'. The token is removed from the list of
tokens passed to the command.
.PP
The actual commands are:
.SS "clear [name]"
.IX Subsection "clear [name]"
This command clears the current pasteboard. If a name is given, the
named pasteboard becomes the current pasteboard, and it is cleared. If
no name is given and there is no current pasteboard, the system
clipboard becomes the current pasteboard and is cleared.
.SS "copy data [flavor [flags]]"
.IX Subsection "copy data [flavor [flags]]"
This command copies the given data to the current pasteboard as the
given flavor and the given flavor flags. The flavor flags default to 0,
and the flavor to 'com.apple.traditional\-mac\-plain\-text'. If there is no
current pasteboard the system clipboard becomes the current pasteboard,
but you get an error anyway because you do not own it at this point, not
having cleared it.
.PP
If the \fIid\fR setting is set to a number, your data is copied to the item
with that \s-1ID.\s0 If it is set to undef, it is copied to item id 1.
.SS "create [name]"
.IX Subsection "create [name]"
The named pasteboard is created if necessary, and becomes the current
pasteboard. If no name is specified, you get the system clipboard, named
\&'com.apple.pasteboard.clipboard'.
.SS "dump"
.IX Subsection "dump"
This command copies the current pasteboard object to standard out in
Data::Dumper format.
.SS "exit"
.IX Subsection "exit"
This command causes the script to exit. End-of-file also has this
effect.
.SS "encode"
.IX Subsection "encode"
This command displays whether data are encoded onto and decoded from the
pasteboard. If an argument is passed, it becomes the new setting. The
arguments are by convention \f(CW1\fR to encode, and \f(CW0\fR not to encode,
though the value of this setting is interpreted in its Perl Boolean
sense.
.PP
Note that this only affects certain flavors of data.
.SS "flavor"
.IX Subsection "flavor"
This command displays the name of the current default flavor. If an
argument is passed, this becomes the new default flavor.
.SS "flavors [conforms_to]"
.IX Subsection "flavors [conforms_to]"
This command dumps the flavors of data present on the clipboard which
conform to the given flavor, If no conforming flavor is given, all
flavors are dumped. If the \fIid\fR is defined, only data from that
pasteboard item are dumped. The output is in \s-1YAML\s0 if module \fB\s-1YAML\s0\fR
can be loaded, or in \fBData::Dumper\fR format if that module can be
loaded.  Either way, what you actually get is an array of anonymous
hashes. Each hash has the following keys:
.PP
.Vb 5
\& flag_names: a reference to a list of the names of the flags set;
\& flags: the flavor flags;
\& flavor: the name of the flavor;
\& tags: the tags associated with the flavor, if any;
\& id: the ID of the pasteboard item the flavor came from.
.Ve
.PP
The tags hash will contain zero or more of the following keys:
.PP
.Vb 4
\& extension: the preferred file name extension for the flavor;
\& mime: the preferred MIME type for the flavor;
\& os: the preferred 4\-byte Mac OS document type for the flavor;
\& pboard: the preferred NSPBoard type for the flavor.
.Ve
.PP
See
<http://developer.apple.com/documentation/Carbon/Conceptual/understanding_utis/>
for the concept of conformance. As a trivial example,
.PP
.Vb 1
\& pbtool> flavors public.text
.Ve
.PP
gets you all the flavors which the system understands as conforming to
the 'public.text' flavor. This is not quite the same as all text data;
ad-hoc flavors may contain text, but if the flavors are not known to the
system to conform to public.text or some subflavor thereof, you will not
see them.
.SS "help"
.IX Subsection "help"
This command displays the documentation for pbtool.
.SS "name"
.IX Subsection "name"
This command displays the name of the current pasteboard. If there is no
current pasteboard, the system clipboard is made the current pasteboard,
and its name is displayed.
.SS "opt"
.IX Subsection "opt"
This command displays the options currently in effect. If it has any
arguments, they are interpreted as options, with the leading '\-' on the
option name being required. The given options (if any) are set, and the
modified values are displayed. For example (assuming all defaults are
still in effect):
.PP
.Vb 2
\& pbtool> opt \-nobinary \-id 2
\& opt \-nobinary \-noecho \-id=2
.Ve
.SS "output (encoding)"
.IX Subsection "output (encoding)"
This command displays the encoding used for non-binary output to
standard out. If no encoding has been specified, the display will be
\&\f(CW\*(Aqnone\*(Aq\fR.
.PP
If an argument is specified, it becomes the new encoding. Specifying
\&\f(CW\*(Aqnone\*(Aq\fR as the new encoding removes the the encoding, if any.
.SS "paste [flavor]"
.IX Subsection "paste [flavor]"
This command retrieves the given flavor from the current pasteboard and
copies it to standard out. The default flavor is
\&'com.apple.traditional\-mac\-plain\-text'. The flavor flags are written to
standard error. If no pasteboard is current, the system pasteboard is
made current. If the \fIid\fR setting is undef, the last occurrence of the
desired flavor (if any) is returned; otherwise the flavor is returned
from the item whose \s-1ID\s0 is the given \fIid\fR.
.SS "paste_all [conforms_to]"
.IX Subsection "paste_all [conforms_to]"
This command displays all data on the current pasteboard conforming to
the given flavor. If no flavor is given, all flavors are displayed. If
the \fIid\fR is set, only data from the corresponding item are displayed.
.PP
The output is the same as for flavors, but in addition the
\&'data' key holds the actual data. If there is no current clipboard, the
system pasteboard is made the current clipboard.
.PP
See
<http://developer.apple.com/documentation/Carbon/Conceptual/understanding_utis/index.html>
for the concept of conformance.
.SS "pbpaste"
.IX Subsection "pbpaste"
This command is equivalent to \fIpaste\fR, but always uses the system
clipboard.
.SS "status [value]"
.IX Subsection "status [value]"
This command displays the current status setting of the current
pasteboard, optionally setting it first to the given value.  If there is
no current pasteboard, the system clipboard is made the current
pasteboard, and its status is displayed.
.SS "synch [name]"
.IX Subsection "synch [name]"
This command synchronizes with the current pasteboard. If a name is
given, that pasteboard is made the current pasteboard, and it is
synchronized. If there is no current pasteboard and no name is given,
the system clipboard is made the current pasteboard.
.PP
The synchronization flags returned by the operation are written to
standard out.
.SS "unique"
.IX Subsection "unique"
This command creates a pasteboard with a unique name. Under Mac \s-1OS 10.4\s0
and above, this name is available via the 'name' command.
.SH "BUGS"
.IX Header "BUGS"
Bugs can be reported to the author by mail, or through
<http://rt.cpan.org/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III \s0(\fIwyant at cpan dot org\fR)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008, 2011\-2017 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
