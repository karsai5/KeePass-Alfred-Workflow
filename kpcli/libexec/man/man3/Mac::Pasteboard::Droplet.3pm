.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mac::Pasteboard::Droplet 3"
.TH Mac::Pasteboard::Droplet 3 "2017-03-23" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mac::Pasteboard::Droplet \- How to write a droplet.
.SH "DETAILS"
.IX Header "DETAILS"
The editor that came with MacOS Perl (for Mac \s-1OS 9\s0 and below) was able
to save your script as a droplet \*(-- that is, an application that you
could run by dropping files onto it. When your script got control, the
paths to the dropped files were in \f(CW@ARGV\fR
.PP
Under Mac \s-1OS X\s0 you can get this functionality by wrapping your Perl
script in an Apple Script. The following example assumes you want to
wrap a Perl script named droplet.PL in an application called
PerlDroplet. It works because a Mac \s-1OS X\s0 application bundle is simply a
directory whose contents are known to the system.
.IP "1. Run the Script Editor, which is found in /Applications/AppleScript/" 4
.IX Item "1. Run the Script Editor, which is found in /Applications/AppleScript/"
.PD 0
.IP "2. Paste the text of the Apple Script as it appears below into the editor." 4
.IX Item "2. Paste the text of the Apple Script as it appears below into the editor."
.IP "3. Save the script as an Application Bundle named PerlDroplet." 4
.IX Item "3. Save the script as an Application Bundle named PerlDroplet."
.IP "4. Copy your Perl script to directory PerlDroplet.app/Contents/Resources/." 4
.IX Item "4. Copy your Perl script to directory PerlDroplet.app/Contents/Resources/."
.PD
.PP
Yes, this will work if you move PerlDroplet somewhere else.
.PP
The 'do shell script' directive used to get the Perl script to run will
actually work on any command that /bin/sh can handle. This means you
need a shebang line in your script, or you need to explicitly run Perl.
The do shell script is the equivalent of Perl's back tick or qx{}
operators; anything the command writes to standard out is returned to
the Apple Script.
.PP
The environment your script sees is fairly minimal. Specifically, you
will not see anything you defined in your .profile or .bash_profile
file. You will, however, see anything you define in
~/.MacOSX/environment.plist \*(-- that is, once you log out and log back in
again. Restarting the finder is not sufficient.
.PP
\&\s-1OK,\s0 at long last here is the actual Apple Script. Beware of the fact
that the software which renders this documentation may wrap or truncate
lines. You may want to start with \fIeg/droplet\fR instead.
.PP
.Vb 2
\& \-\- field the drop event
\& on open argv
\&        
\&        \-\- Make the file names into strings containing quoted POSIX file names, and concatenate them with spaces between.
\&        set shell_argv to ""
\&        repeat with arg in argv
\&                set shell_argv to shell_argv & " " & quoted form of POSIX path of arg
\&        end repeat
\&        
\&        \-\- Our Perl script is droplet.PL in the Resources directory of the application bundle.
\&        set perl_script to quoted form of POSIX path of (path to resource "droplet.PL")
\&        
\&        \-\- Run the Perl script. The file names appear in @ARGV. Its output to STDOUT is captured in result.
\&        set result to do shell script perl_script & shell_argv
\&        
\&        \-\- Display a dialog containing the result.
\&        display dialog result as string
\&        
\& end open
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III \s0\fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2011\-2017 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
