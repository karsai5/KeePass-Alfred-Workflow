.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mac::Pasteboard 3"
.TH Mac::Pasteboard 3 "2017-03-23" "perl v5.18.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mac::Pasteboard \- Manipulate Mac OS X clipboards/pasteboards.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To acquire text from the system clipboard, replacing it with your own:
.PP
.Vb 3
\&  use Mac::Pasteboard;
\&  my $old_text = pbpaste();
\&  pbcopy ("Hello, sailor!\en");
.Ve
.PP
or equivalently, using the object-oriented interface,
.PP
.Vb 5
\&  use Mac::Pasteboard;
\&  my $pb = Mac::Pasteboard\->new ();
\&  my $old_text = $pb\->paste ();
\&  $pb\->clear ();
\&  $pb\->copy ("Hello, sailor!\en");
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
This module is only useful if the script calling it has access to the
desktop. Otherwise attempts to instantiate a Mac::Pasteboard object will
fail, with Mac::Pasteboard\->get ('status') returning
coreFoundationUnknownErr (\-4960). This may happen when running over an
ssh connection, and probably from a cron job as well, depending on your
version of Mac \s-1OS X.\s0 This restriction appears to apply not only to the
system clipboard but to privately-created pasteboards.
.PP
Beginning with Mac \s-1OS 10.6\s0 Snow Leopard, pasteboards could contain
multiple items. Until I upgrade, this package can only access the first
item. If your interest is in writing a droplet (that is, an application
that processes files which are dropped on it), see
the droplet documentation.
.PP
This module is in general ignorant of the semantics implied by the
system-declared flavors, and makes no attempt to enforce them. In
plainer English, it is up to the user of this module to ensure that the
specified flavor is actually appropriate to the data it is used to
describe. For example, if you store some data on the pasteboard as
flavor 'public.jpeg', it is up to you to make sure that the data are, in
fact, a valid \s-1JPEG\s0 image.
.PP
On the other hand, it is (or at least may be) convenient to get the text
types encoded and decoded properly off the pasteboard. This is what the
encode attribute is for. It is false by default
because it appears not to work as one would hope under older versions of
Mac \s-1OS.\s0 It also does not cover \f(CW\*(C`com.apple.traditional\-mac\-plain\-text\*(C'\fR
because the encoding of this appears to change, and I have been unable
to find documentation (or to figure out on my own) which encoding to
expect.  \fBCaveat user\fR.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This \s-1XS\s0 module accesses Mac \s-1OS X\s0 pasteboards, which can be thought of as
clipboards with bells and whistles. Under Mac \s-1OS X,\s0 the system clipboard
is simply a special case of a pasteboard. In the following
documentation, 'clipboard' refers to the system clipboard, and
\&'pasteboard' refers to pasteboards in general.
.PP
This module uses the Pasteboard interface, which was introduced in Mac
\&\s-1OS 10.3 \s0(a.k.a. 'Panther'), so it requires Mac \s-1OS 10.3\s0 or better to run.
.PP
The simple case of placing plain text onto and reading it from the
system clipboard is accomplished by subroutines \fIpbcopy()\fR and \fIpbpaste()\fR
respectively. These correspond roughly to the command-line executables
of the same name, and are exported by default. If this is all you are
interested in, you can stop reading here. The rest of this section
describes the bells and whistles associated with a Mac \s-1OS X\s0 pasteboard.
.PP
A Mac \s-1OS X\s0 pasteboard contains zero or more data items, each of which is
capable of holding one or more flavors of data. The system defines a
couple pasteboards, including the system clipboard, named
\&'com.apple.pasteboard.clipboard'. The system clipboard is the default
taken if \fInew()\fR is called without arguments.
.PP
Data items are identified by an item id which is provided by the creator
of the item, and which (the documentation says) should only be
interpreted by the creator. Item flavors may be duplicated between items
but not within items. The item id is an attribute of
the Mac::Pasteboard object, with the default chosen so that you should
not need to worry about it unless you explicitly want more than one item
on a pasteboard.
.PP
A flavor is a Uniform Type Identifier which describes the semantics of
the data with which it is associated. In practice any string can be
used, but you probably want to stick to the system-declared flavors if
it is important to you that other software understand your data. The
\&\*(L"\s-1SEE ALSO\*(R"\s0 section contains a link to a reference for Uniform Type
Identifiers which includes a description of all the system-declared
UTIs. All methods (or subroutines) that place data on or retrieve data
from a pasteboard take the flavor as an argument. This argument defaults
to 'com.apple.traditional\-mac\-plain\-text'.
.PP
Data may be placed on a pasteboard only by the owner of that pasteboard.
Ownership is acquired by clearing the pasteboard. In general, the owner
of a pasteboard may either place data directly on to it, or place a
promise of data to be generated when the data are actually requested.
This module does not support placing a promise onto the pasteboard.
It will retrieve data promised by another application, but can not
specify a paste location for that data; it is simply returned verbatim.
.SH "METHODS"
.IX Header "METHODS"
Some of the methods are documented as returning a status. This status is
a dualvar, whose numeric value is the Mac \s-1OS\s0 error encountered, and
whose string value is a description of the error similar to that
produced by the Mac::Error 'macerror' script. Errors other than the
documented pasteboard error will be described as 'Unknown error' unless
Mac::Error is installed and the error is known to that module.
.PP
Note, however, that by default the fatal attribute
is true, which means an error will result in an exception. If
fatal is false, the status will be false for success
and true for failure.
.PP
The following methods are provided:
.ie n .SS "$pb = Mac::Pasteboard\->new ($name)"
.el .SS "\f(CW$pb\fP = Mac::Pasteboard\->new ($name)"
.IX Subsection "$pb = Mac::Pasteboard->new ($name)"
This method creates a new pasteboard object, connected to the pasteboard
of the given name, creating the pasteboard if necessary. If called with
no argument, you get the system clipboard, a.k.a.
\&\*(L"kPasteboardClipboard\*(R", a.k.a.  'com.apple.pasteboard.clipboard'.
Passing undef to \fInew()\fR is \fBnot\fR equivalent to calling it with no
arguments at all, since undef is the encoding for
\&\*(L"kPasteboardUniqueName\*(R".
.PP
Note that an error in creating a new pasteboard \fBwill\fR cause an
exception, since the fatal attribute defaults to 1.
If you want to get a status back, you will need to call
.PP
.Vb 1
\& Mac::Pasteboard\->set (fatal => 0);
.Ve
.PP
If the attempt to instantiate an object fails, the status is available
from
.PP
.Vb 1
\& Mac::Pasteboard\->get (\*(Aqstatus\*(Aq);
.Ve
.ie n .SS "$status = $pb\->clear ()"
.el .SS "\f(CW$status\fP = \f(CW$pb\fP\->clear ()"
.IX Subsection "$status = $pb->clear ()"
This method clears the pasteboard. You must clear the pasteboard before
adding data to it.
.ie n .SS "$clone = $pb\->clone ()"
.el .SS "\f(CW$clone\fP = \f(CW$pb\fP\->clone ()"
.IX Subsection "$clone = $pb->clone ()"
This method clones the pasteboard object.
.ie n .SS "$status = $pb\->copy ($data, $flavor, $flags)"
.el .SS "\f(CW$status\fP = \f(CW$pb\fP\->copy ($data, \f(CW$flavor\fP, \f(CW$flags\fP)"
.IX Subsection "$status = $pb->copy ($data, $flavor, $flags)"
This method puts the given data on the pasteboard, identifying it as
being of the given flavor, and assigning the given pasteboard flags,
which are the bitwise 'or' (a.k.a. the '|' operator) of the individual
flavor flags. If \f(CW$flags\fR is omitted,
kPasteboardFlavorNoFlags is used. If
\&\f(CW$flavor\fR is omitted, undefined, or the empty string, the default
flavor is used.
.PP
The pasteboard is \fBnot\fR cleared prior to this operation; any other data
of other flavors remain on the pasteboard.
.PP
If the id attribute is undef, the data are placed in
the item whose id is 1. Otherwise, the data are placed in the item with
the given id.  It is an error to attempt to place a given flavor in a
given item more than once.
.ie n .SS "@names = $pb\->flavor_flag_names ($flags)"
.el .SS "\f(CW@names\fP = \f(CW$pb\fP\->flavor_flag_names ($flags)"
.IX Subsection "@names = $pb->flavor_flag_names ($flags)"
This method (or subroutine) interprets its last argument as flavor
flags, and returns the names of the flags set. If no recognized flags
are set, you get an empty list.
.PP
If called in scalar context you get back the names joined with ', ', or
\&'kPasteboardFlavorNoFlags' if there are none.
.ie n .SS "%tags = $pb\->flavor_tags ($flavor)"
.el .SS "\f(CW%tags\fP = \f(CW$pb\fP\->flavor_tags ($flavor)"
.IX Subsection "%tags = $pb->flavor_tags ($flavor)"
This method (or subroutine) interprets its last argument as a flavor
name, and returns the preferred tags associated with the flavor in a
hash. The hash will have zero or more of the following keys:
.PP
.Vb 4
\& extension: the preferred file name extension for the flavor;
\& mime: the preferred MIME type for the flavor;
\& pboard: the preferred NSPBoard type for the flavor;
\& os: the preferred 4\-byte Mac OS document type for the flavor.
.Ve
.PP
If called in scalar context, you get back a reference to the hash.
.ie n .SS "@flavors = $pb\->flavors ($conforms_to)"
.el .SS "\f(CW@flavors\fP = \f(CW$pb\fP\->flavors ($conforms_to)"
.IX Subsection "@flavors = $pb->flavors ($conforms_to)"
This method returns the list of data flavors conforming to the given
flavor currently on the pasteboard. If \f(CW$conforms_to\fR is omitted or undef,
you get all flavors. If the id attribute is defined,
you get only flavors from the corresponding pasteboard item; otherwise
you get all conforming flavors. If you turn off the fatal attribute, you will get an empty list if an error occurs, and
you will need to check the status attribute so see
if the operation actually succeeded.
.PP
The return is a list of anonymous hashes, each containing the following
keys:
.PP
.Vb 3
\& flags: the flavor flags;
\& flavor: the flavor name;
\& id: the pasteboard item ID.
.Ve
.PP
If called in scalar context, you get a reference to the list.
.PP
The \*(L"\s-1SEE ALSO\*(R"\s0 section has a link to the \fIUniform Type Identifiers
Overview\fR, which deals with the notion of type conformance.
.ie n .SS "$value = $pb\->get ($name)"
.el .SS "\f(CW$value\fP = \f(CW$pb\fP\->get ($name)"
.IX Subsection "$value = $pb->get ($name)"
This method returns the value of the given attribute. An
exception is thrown if the attribute does not exist.
.PP
This method can also be called statically (that is, as
Mac::Pasteboard\->get ($name)), in which case it returns the static value
of the attribute, if any.
.ie n .SS "($data, $flags) = $pb\->paste ($flavor)"
.el .SS "($data, \f(CW$flags\fP) = \f(CW$pb\fP\->paste ($flavor)"
.IX Subsection "($data, $flags) = $pb->paste ($flavor)"
If the id attribute is defined, this method returns the
data of the given flavor from that pasteboard id, and the associated
flavor flags; otherwise it returns the data from the
last instance of that flavor found, and the associated flavor flags. If
no such flavor data is found, an exception is thrown if the
missing_ok attribute is false, or undef is
returned for \f(CW$data\fR if missing_ok is true.
.PP
You test the \f(CW$flags\fR value for individual flags by using the bitwise
\&'and' operator ('&'). For example:
.PP
.Vb 2
\& $flags & kPasteboardFlavorSystemTranslated
\&   and print "This data provided by Translation Services\en";
.Ve
.PP
If called in scalar context, you get \f(CW$data\fR.
.ie n .SS "@data = $pb\->paste_all ($conforms_to)"
.el .SS "\f(CW@data\fP = \f(CW$pb\fP\->paste_all ($conforms_to)"
.IX Subsection "@data = $pb->paste_all ($conforms_to)"
This method returns all flavors of data on the pasteboard which conform
to the given flavor. If \f(CW$conforms_to\fR is omitted or undef, all flavors of
data are returned. If the id attribute is defined, only
data from that pasteboard item are returned; otherwise everything
accessible is returned.
.PP
The return is a list of anonymous hashes, each having the following
keys:
.PP
.Vb 4
\& data: the flavor data;
\& flags: the flavor flags;
\& flavor: the flavor name;
\& id: the pasteboard item ID.
.Ve
.PP
If called in scalar context, you get a reference to the list.
.PP
The \*(L"\s-1SEE ALSO\*(R"\s0 section has a link to the \fIUniform Type Identifiers
Overview\fR, which deals with the notion of type conformance.
.ie n .SS "pbcopy ($data, $flavor, $flags)"
.el .SS "pbcopy ($data, \f(CW$flavor\fP, \f(CW$flags\fP)"
.IX Subsection "pbcopy ($data, $flavor, $flags)"
This convenience subroutine (\fBnot\fR method) clears the system clipboard
and then copies the given data to it. All three arguments are optional
(the prototype being (;$$$). If \f(CW$data\fR is undef, the value of \f(CW$_\fR is used.
If \f(CW$flavor\fR is undef, the default flavor is used. If
\&\f(CW$flags\fR is undef, kPasteboardFlavorNoFlags
is used.
.PP
In other words, this subroutine is more-or-less equivalent to the
\&'pbcopy' executable.
.ie n .SS "pbcopy_find ($data, $flavor, $flags)"
.el .SS "pbcopy_find ($data, \f(CW$flavor\fP, \f(CW$flags\fP)"
.IX Subsection "pbcopy_find ($data, $flavor, $flags)"
This convenience subroutine (\fBnot\fR method) clears the 'find' pasteboard
and then copies the given data to it. All three arguments are optional
(the prototype being (;$$$). If \f(CW$data\fR is undef, the value of \f(CW$_\fR is used.
If \f(CW$flavor\fR is undef, the default flavor is used. If
\&\f(CW$flags\fR is undef, kPasteboardFlavorNoFlags
is used.
.PP
In other words, this subroutine is more-or-less equivalent to
.PP
.Vb 1
\& $ pbcopy \-pboard find
.Ve
.ie n .SS "$encode = pbencode ();"
.el .SS "\f(CW$encode\fP = pbencode ();"
.IX Subsection "$encode = pbencode ();"
.ie n .SS "$old_encode = pbencode ( $new_encode );"
.el .SS "\f(CW$old_encode\fP = pbencode ( \f(CW$new_encode\fP );"
.IX Subsection "$old_encode = pbencode ( $new_encode );"
this convenience subroutine (b<not> method) returns the encode setting
for the system pasteboard. if the argument is defined and not c<''>, the
argument becomes the new encode setting and the old encode setting is
returned.
.ie n .SS "$encode = pbencode_find ();"
.el .SS "\f(CW$encode\fP = pbencode_find ();"
.IX Subsection "$encode = pbencode_find ();"
.ie n .SS "$old_encode = pbencode_find ( $new_encode );"
.el .SS "\f(CW$old_encode\fP = pbencode_find ( \f(CW$new_encode\fP );"
.IX Subsection "$old_encode = pbencode_find ( $new_encode );"
this convenience subroutine (b<not> method) returns the encode setting
for the 'find' pasteboard. if the argument is defined and not c<''>, the
argument becomes the new encode setting and the old encode setting is
returned.
.ie n .SS "$default_flavor = pbflavor ();"
.el .SS "\f(CW$default_flavor\fP = pbflavor ();"
.IX Subsection "$default_flavor = pbflavor ();"
.ie n .SS "$old_default_flavor = pbflavor ( $new_default_flavor );"
.el .SS "\f(CW$old_default_flavor\fP = pbflavor ( \f(CW$new_default_flavor\fP );"
.IX Subsection "$old_default_flavor = pbflavor ( $new_default_flavor );"
this convenience subroutine (b<not> method) returns the default data
flavor for the system pasteboard. if the argument is defined and not
c<''>, the argument becomes the new default flavor and the old default
flavor is returned.
.ie n .SS "$default_flavor = pbflavor_find ();"
.el .SS "\f(CW$default_flavor\fP = pbflavor_find ();"
.IX Subsection "$default_flavor = pbflavor_find ();"
.ie n .SS "$old_default_flavor = pbflavor_find ( $new_default_flavor );"
.el .SS "\f(CW$old_default_flavor\fP = pbflavor_find ( \f(CW$new_default_flavor\fP );"
.IX Subsection "$old_default_flavor = pbflavor_find ( $new_default_flavor );"
this convenience subroutine (b<not> method) returns the default data
flavor for the 'find' pasteboard. if the argument is defined and not
c<''>, the argument becomes the new default flavor and the old default
flavor is returned.
.ie n .SS "($data, $flags) = pbpaste ($flavor)"
.el .SS "($data, \f(CW$flags\fP) = pbpaste ($flavor)"
.IX Subsection "($data, $flags) = pbpaste ($flavor)"
This convenience subroutine (\fBnot\fR method) retrieves the given flavor
of data from the system clipboard, and its associated flavor flags. The
flavor is optional, the default being the default
flavor. If the given flavor is not found undef is
returned for \f(CW$data\fR.
.PP
The functionality is equivalent to calling \fIpaste()\fR on an object whose
id attribute is undef.
.PP
If called in scalar context, you get \f(CW$data\fR.
.PP
In other words, this subroutine is more-or-less equivalent to the
\&'pbpaste' executable.
.ie n .SS "($data, $flags) = pbpaste_find ($flavor)"
.el .SS "($data, \f(CW$flags\fP) = pbpaste_find ($flavor)"
.IX Subsection "($data, $flags) = pbpaste_find ($flavor)"
This convenience subroutine (\fBnot\fR method) retrieves the given flavor
of data from the 'find' pasteboard, and its associated flavor flags. The
flavor is optional, the default being the default
flavor. If the given flavor is not found undef is
returned for \f(CW$data\fR.
.PP
The functionality is equivalent to calling \fIpaste()\fR on an object whose
id attribute is undef.
.PP
If called in scalar context, you get \f(CW$data\fR.
.PP
In other words, this subroutine is more-or-less equivalent to
.PP
.Vb 1
\& $ pbpaste \-pboard find
.Ve
.ie n .SS "$pb = $pb\->set ($name => $value ...)"
.el .SS "\f(CW$pb\fP = \f(CW$pb\fP\->set ($name => \f(CW$value\fP ...)"
.IX Subsection "$pb = $pb->set ($name => $value ...)"
This method sets the values of the given attributes. More
than one attribute can be set at a time. An exception is thrown if the
attribute does not exist, or if the attribute is read-only. The object
is returned, so that calls can be chained.
.PP
This method can also be called statically (that is, as
Mac::Pasteboard\->set ($name => \f(CW$value\fR ...)). If an attribute does
something useful when set statically, its description will say so.
Setting other attributes statically is unsupported, at least in the
sense that the author makes no representation what will happen if you do
set them, and does not promise that whatever happens when you do this
will not change in the future.
.ie n .SS "$flags = $pb\->synch ()"
.el .SS "\f(CW$flags\fP = \f(CW$pb\fP\->synch ()"
.IX Subsection "$flags = $pb->synch ()"
This method synchronizes the local copy of the pasteboard with the
global pasteboard, and returns the synchronization
flags. This \fBshould\fR be called on your behalf
when needed, but it is exposed because one of the flags returned says
whether the calling process owns the pasteboard.  For example:
.PP
.Vb 2
\& $pb\->synch & kPasteboardClientIsOwner
\&     or $pb\->clear ();
.Ve
.PP
to take ownership of the pasteboard (by clearing it) if it is not
already owned by the process. Note that
kPasteboardClientIsOwner is not imported by
default.
.ie n .SS "@names = $pb\->synch_flag_names ($flags)"
.el .SS "\f(CW@names\fP = \f(CW$pb\fP\->synch_flag_names ($flags)"
.IX Subsection "@names = $pb->synch_flag_names ($flags)"
This method (or subroutine) interprets its last argument as
synchronization flags (i.e. as the return from the \fIsynch()\fR method), and
returns the names of the flags set. If none are set, you get an empty
list.
.PP
If called in scalar context you get back the names joined with ', ', or
an empty string if there are none, since there is no manifest constant
for synchronization flags that corresponds to
\&'kPasteboardFlavorNoFlags'.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
The types of the attributes are specified in parentheses after their
names. Boolean attributes are interpreted in the Perl sense \- that is,
\&\f(CW\*(C`undef\*(C'\fR, \f(CW0\fR and \f(CW\*(Aq\*(Aq\fR are false, and anything else is true.
.PP
This class supports the following attributes:
.SS "encode (boolean)"
.IX Subsection "encode (boolean)"
This attribute specifies whether or not certain flavors are to be
encoded into and decoded from the pasteboard. Supported flavors and the
encodings used are:
.PP
.Vb 3
\&    public.utf8\-plain\-text           UTF\-8
\&    public.utf16\-plain\-text          UTF\-16LE
\&    public.utf16\-external\-plain\-text UTF\-16
.Ve
.PP
Flavor \f(CW\*(C`com.apple.traditional\-mac\-plain\-text\*(C'\fR (the initial default
flavor) is not supported by this attribute because the normal encoding
is undocumented (\s-1ASCII\s0? MacRoman? MacSomething depending on locale?).
When it has wide characters to handle it seems to get upgraded to
\&\s-1UTF\-16LE,\s0 but how to tell when this is done is also undocumented.
.SS "default_flavor (string)"
.IX Subsection "default_flavor (string)"
This attribute stores the name of the default flavor to use if a flavor
is not specified in the \f(CW\*(C`copy()\*(C'\fR or \f(CW\*(C`paste()\*(C'\fR call. The default value
of this attribute is \f(CW\*(C`defaultFlavor()\*(C'\fR.
.SS "fatal (boolean)"
.IX Subsection "fatal (boolean)"
If this attribute is true, any pasteboard error throws an exception. If
false, error codes are returned to the caller.
.PP
This attribute can be set statically, in which case it controls whether
static methods throw an exception on a pasteboard error. Currently, only
\&\fInew()\fR is affected by this; \fIpbcopy()\fR and friends are subroutines, not
static methods.
.PP
Setting this statically does \fBnot\fR affect the default value of this
attribute in an instantiated object.
.PP
The default is 1 (i.e. true).
.SS "id (integer)"
.IX Subsection "id (integer)"
This attribute supplies the id for data to be copied to or pasted from
the pasteboard. In addition to a non-negative integer, it can be set to
undef. See \fIcopy()\fR and \fIpaste()\fR for the effects of this attribute on their
action.  In most cases you will not need to change this.
.PP
The default is undef.
.SS "missing_ok (boolean)"
.IX Subsection "missing_ok (boolean)"
If this attribute is true, \fIpaste()\fR returns undef if the required flavor
is missing, rather than throwing an exception if 'fatal' is true. The
\&\fIpbpaste()\fR subroutine sets this true for the object it manufactures to
satisfy its request.
.PP
The default is 0 (i.e. false).
.SS "name (string, readonly)"
.IX Subsection "name (string, readonly)"
This attribute reports the actual name assigned to the pasteboard. Under
Panther (Mac \s-1OS 10.3\s0) it is the name passed to new (), or the name of
the system pasteboard if no name was passed in. Under Tiger (Mac \s-1OS
10.4\s0) and above, the actual name is retrieved once the pasteboard is
created. If this name cannot be retrieved you get the same result as
under Panther.
.PP
This name may not be the name you used to create the
pasteboard, even if you used one of the built-in names. But unless you
created the pasteboard using name kPasteboardUniqueName, the name will
be equivalent. That is,
.PP
.Vb 3
\& my $pb1 = Mac::Pasteboard\->new();
\& my $pb2 = Mac::Pasteboard\->new(
\&     $pb1\->get(\*(Aqname\*(Aq));
.Ve
.PP
gives two handles to the same clipboard.
.SS "status (dualvar)"
.IX Subsection "status (dualvar)"
This attribute contains the status of the last operation. You can set
this with an integer; the dualvar will be generated.
.PP
The static attribute contains the status of the last static method to
operate on a pasteboard. Currently, this means the last call to \fInew()\fR.
.SH "EXPORT"
.IX Header "EXPORT"
The \fIpbcopy()\fR, \fIpbcopy_find()\fR, \fIpbpaste()\fR, and \fIpbpaste_find()\fR subroutines
are exported by default. In addition, tag ':all' exports everything, and
tag ':const' exports all constants except those which must be exported
explicitly (currently only coreFoundationUnknownErr). Constants are also
accessible by &Mac::Pasteboard::constant_name. The following constants
are defined:
.SS "Error codes"
.IX Subsection "Error codes"
\fIbadPasteboardFlavorErr\fR
.IX Subsection "badPasteboardFlavorErr"
.PP
This constant represents the error number returned when a flavor is not
found on the pasteboard. It is not a dualvar \*(-- it just represents the
number of the error, which is \-25133.
.PP
\fIduplicatePasteboardFlavorErr\fR
.IX Subsection "duplicatePasteboardFlavorErr"
.PP
This constant represents the error number returned when an attempt is
made to place in a pasteboard item a flavor that is already there.  It
is not a dualvar \*(-- it just represents the number of the error, which is
\&\-25134.
.PP
\fIbadPasteboardIndexErr\fR
.IX Subsection "badPasteboardIndexErr"
.PP
This constant represents the error number returned when the code indexes
off the end of the pasteboard. If you get it in use, it probably
represents a bug in this module, and should be reported as such. It is
not a dualvar \*(-- it just represents the number of the error, which is
\&\-25131.
.PP
\fIbadPasteboardItemErr\fR
.IX Subsection "badPasteboardItemErr"
.PP
This constant represents the error number returned when the user
requests data from a non-existent item \s-1ID.\s0 It is not a dualvar \*(-- it
just represents the number of the error, which is \-25132.
.PP
\fIbadPasteboardSyncErr\fR
.IX Subsection "badPasteboardSyncErr"
.PP
This constant represents the error returned when the user tries to fetch
stale data from the pasteboard. Because this module is supposed to
synchronize before fetching, it represents either a bug or a race
condition. It is not a dualvar \*(-- it just represents the number of the
error, which is \-25130.
.PP
\fIcoreFoundationUnknownErr\fR
.IX Subsection "coreFoundationUnknownErr"
.PP
This constant represents \fBthe\fR unknown error, not just \fBan\fR unknown
error. One would think you would never get this from Apple's code, but
it appears that you will get this error if the caller does not have
access to the desktop. For example, you can get this error in a script
running over an ssh connection, or in a cron job.
.PP
\&\fBThis constant is not exported with the :const tag,\fR because there are
other places it could potentially come from. If you want it, you will
need to import it explicitly. It is not a dualvar \*(-- it just represents
the number of the error, which is \-4960.
.PP
\fInoPasteboardPromiseKeeperErr\fR
.IX Subsection "noPasteboardPromiseKeeperErr"
.PP
This constant represents the error returned when the user tries place
promised data on the pasteboard without first registering a promise
keeper callback. This package does not support promised data.
This constant is not a dualvar \*(-- it just represents the number of the
error, which is \-25136.
.PP
\fInotPasteboardOwnerErr\fR
.IX Subsection "notPasteboardOwnerErr"
.PP
This constant represents the error returned when the user tries place
data on the pasteboard without first becoming its owner by clearing it.
It is not a dualvar \*(-- it just represents the number of the
error, which is \-25135.
.SS "Flavor flags"
.IX Subsection "Flavor flags"
\fIkPasteboardFlavorNoFlags\fR
.IX Subsection "kPasteboardFlavorNoFlags"
.PP
This pasteboard flavor flag is really a value, to be used if no flags
are set.
.PP
\fIkPasteboardFlavorNotSaved\fR
.IX Subsection "kPasteboardFlavorNotSaved"
.PP
This pasteboard flavor flag indicates that the flavor's data is
volatile, and should not be saved.
.PP
\fIkPasteboardFlavorPromised\fR
.IX Subsection "kPasteboardFlavorPromised"
.PP
This pasteboard flavor flag indicates that the flavor's data is
promised. This module does not support creating promised data.
.PP
\fIkPasteboardFlavorRequestOnly\fR
.IX Subsection "kPasteboardFlavorRequestOnly"
.PP
This pasteboard flavor flag indicates that the flavor must be requested
explicitly; scanning for available flavors will not find it.
.PP
\fIkPasteboardFlavorSenderOnly\fR
.IX Subsection "kPasteboardFlavorSenderOnly"
.PP
This pasteboard flavor flag indicates that the flavor's data are only
available to the process that placed it on the pasteboard.
.PP
Oddly enough, the 'pbpaste' executable seems to be able to find such
data. But the Pasteboard Peeker demo application can not, so I am pretty
sure this module is working \s-1OK.\s0 Unfortunately I was unable to find the
source for pbpaste online, so I am unable to verify what's going on.
.PP
\fIkPasteboardFlavorSenderTranslated\fR
.IX Subsection "kPasteboardFlavorSenderTranslated"
.PP
This pasteboard flavor flag indicates that the flavor's data has been
translated in some way by the process that placed it on the clipboard,
and it will not be saved by the Finder in clipping files.
.PP
\fIkPasteboardFlavorSystemTranslated\fR
.IX Subsection "kPasteboardFlavorSystemTranslated"
.PP
This pasteboard flavor flag indicates that the flavor's data must be
translated by the Translation Manager. This flag cannot be set
programmatically, and the Finder will not save this data in clipping
files.
.SS "Pasteboard and flavor names"
.IX Subsection "Pasteboard and flavor names"
\fIdefaultFlavor\fR
.IX Subsection "defaultFlavor"
.PP
This constant represents the name of the default flavor,
\&'com.apple.traditional\-mac\-plain\-text'.
.PP
\fIkPasteboardClipboard\fR
.IX Subsection "kPasteboardClipboard"
.PP
This constant represents the name of the system clipboard,
\&'com.apple.pasteboard.clipboard'.
.PP
\fIkPasteboardFind\fR
.IX Subsection "kPasteboardFind"
.PP
This constant represents the name of the find pasteboard,
\&'com.apple.pasteboard.find'.
.PP
\fIkPasteboardUniqueName\fR
.IX Subsection "kPasteboardUniqueName"
.PP
This constant specifies that a unique name be generated for the
pasteboard. Under Mac \s-1OS 10.4 \s0(Tiger) or above, the generated name will
be available in the name attribute; under
Mac \s-1OS 10.3 \s0(Panther), the generated name is unavailable, and the
name attribute will be undef.
.PP
The value of this constant is documented as (CFStringRef) \s-1NULL,\s0 so it is
represented in Perl by undef.
.SS "Synchronization flags"
.IX Subsection "Synchronization flags"
\fIkPasteboardClientIsOwner\fR
.IX Subsection "kPasteboardClientIsOwner"
.PP
This synchronization flag is true if the caller is the owner of the
pasteboard.
.PP
\fIkPasteboardModified\fR
.IX Subsection "kPasteboardModified"
.PP
This synchronization flag indicates that the pasteboard has been
modified since the last time this program accessed it, and the local
copy of the pasteboard has been synchronized.
.SH "BUGS"
.IX Header "BUGS"
Please report bugs either through <http://rt.cpan.org/> or by mail to
the author.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fBClipboard\fR module by Ryan King will access text on the clipboard
under most operating systems. Under Mac \s-1OS X,\s0 it shells out to the
\&\fIpbpaste\fR and \fIpbcopy\fR executables.
.PP
The \fIpbpaste\fR and \fIpbcopy\fR executables themselves are available, and
described by their respective man pages.
.PP
The \fIPasteboard Manager Reference\fR is available online at
<http://developer.apple.com/documentation/Carbon/Reference/Pasteboard_Reference/Reference/reference.html>.
See also the \fIPasteboard Manager Programming Guide\fR at
<http://developer.apple.com/documentation/Carbon/Conceptual/Pasteboard_Prog_Guide/>.
.PP
The \fIUniform Type Identifiers Overview\fR is available online at
<http://developer.apple.com/documentation/Carbon/Conceptual/understanding_utis/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III, \s0\fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008, 2011\-2017 by Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
